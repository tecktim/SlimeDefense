<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zenseless.OpenTK</name>
    </assembly>
    <members>
        <member name="T:Zenseless.OpenTK.Buffer">
            <summary>
            A class that encapsulates an OpenGL buffer object.
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
        </member>
        <member name="M:Zenseless.OpenTK.Buffer.#ctor">
            <summary>
            Constructs a new OpenGL buffer object.
            </summary>
        </member>
        <member name="P:Zenseless.OpenTK.Buffer.Handle">
            <summary>
            Returns the OpenGL handle
            </summary>
        </member>
        <member name="M:Zenseless.OpenTK.Buffer.Set``1(``0[],OpenTK.Graphics.OpenGL4.BufferUsageHint)">
            <summary>
            Copies the given data into a buffer object on the GPU.
            </summary>
            <typeparam name="DataType">The value data type of each array element</typeparam>
            <param name="data">The data array</param>
            <param name="usageHint">How will this buffer object be used</param>
        </member>
        <member name="M:Zenseless.OpenTK.Buffer.Set(System.IntPtr,System.Int32,OpenTK.Graphics.OpenGL4.BufferUsageHint)">
            <summary>
            Copies the given data into a buffer object on the GPU.
            </summary>
            <param name="data">A pointer to the data</param>
            <param name="byteSize">Size of the data in bytes</param>
            <param name="usageHint">How will this buffer object be used</param>
        </member>
        <member name="M:Zenseless.OpenTK.Buffer.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            Implementers should dispose all their resources her.
            </summary>
        </member>
        <member name="T:Zenseless.OpenTK.FrameBuffer">
            <summary>
            Frame buffer class that handles rendering to texture(s).
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
        </member>
        <member name="M:Zenseless.OpenTK.FrameBuffer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenTK.FrameBuffer"/> class.
            </summary>
            <exception cref="T:Zenseless.OpenTK.FrameBufferException">
            Given texture is null or texture dimensions do not match primary texture
            </exception>
        </member>
        <member name="M:Zenseless.OpenTK.FrameBuffer.GetTexture(OpenTK.Graphics.OpenGL4.FramebufferAttachment)">
            <summary>
            Return the texture that is attached to the given attachment point.
            </summary>
            <param name="attachmentPoint">The attachment point where the requested texture is attached to.</param>
            <returns></returns>
        </member>
        <member name="P:Zenseless.OpenTK.FrameBuffer.CurrentFrameBufferHandle">
            <summary>
            Handle of the currently active frame buffer. Equals 0 if the default is active
            </summary>
        </member>
        <member name="P:Zenseless.OpenTK.FrameBuffer.DisposesAttachments">
            <summary>
            If true all attachments are disposed when the FrameBuffer is disposed.
            </summary>
        </member>
        <member name="P:Zenseless.OpenTK.FrameBuffer.Handle">
            <summary>
            Returns the OpenGL object handle
            </summary>
        </member>
        <member name="M:Zenseless.OpenTK.FrameBuffer.Attach(Zenseless.OpenTK.Texture,OpenTK.Graphics.OpenGL4.FramebufferAttachment)">
            <summary>
            Attaches the specified texture. The FBO will try to dispose the texture when the FBO is disposed.
            </summary>
            <param name="texture">The texture to attach.</param>
            <param name="attachmentPoint">The attachment point to attach to.</param>
            <exception cref="T:Zenseless.OpenTK.FrameBufferException">
            Given texture is null or texture dimensions do not match primary texture
            </exception>
        </member>
        <member name="M:Zenseless.OpenTK.FrameBuffer.Attach(Zenseless.OpenTK.RenderBuffer,OpenTK.Graphics.OpenGL4.FramebufferAttachment)">
            <summary>
            Attaches the specified render buffer. The FBO will try to dispose the render buffer when the FBO is disposed.
            </summary>
            <param name="renderBuffer">The render buffer to attach.</param>
            <param name="attachmentPoint">The attachment point to attach to.</param>
            <exception cref="T:Zenseless.OpenTK.FrameBufferException">
            Given texture is null or texture dimensions do not match primary texture
            </exception>
        </member>
        <member name="M:Zenseless.OpenTK.FrameBuffer.Draw(System.Action)">
            <summary>
            Draw to the texture attachments of the FBO.
            </summary>
            <param name="draw">The code to draw.</param>
        </member>
        <member name="M:Zenseless.OpenTK.FrameBuffer.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            </summary>
        </member>
        <member name="T:Zenseless.OpenTK.FrameBufferHelper">
            <summary>
            Contains methods for saving the frame buffer into an image
            </summary>
        </member>
        <member name="M:Zenseless.OpenTK.FrameBufferHelper.ToByteArray(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Saves a rectangular area of the current frame buffer into an array of bytes
            </summary>
            <param name="x">start position in x-direction</param>
            <param name="y">start position in y-direction</param>
            <param name="width">size in x-direction</param>
            <param name="height">size in y-direction</param>
            <param name="alpha">If <code>true</code> the alpha channel is stored.
            <code>false</code> by default.</param>
            <returns>byte[]</returns>
        </member>
        <member name="T:Zenseless.OpenTK.IObjectHandle">
            <summary>
            Interface for all OpenGL objects that can be accessed via handle
            </summary>
        </member>
        <member name="P:Zenseless.OpenTK.IObjectHandle.Handle">
            <summary>
            Returns the OpenGL object handle
            </summary>
        </member>
        <member name="T:Zenseless.OpenTK.RenderBuffer">
            <summary>
            OpenGL Objects that contain images. They are created and used specifically with Framebuffer Objects. They are optimized for use as render targets.
            </summary>
            <seealso cref="T:Zenseless.Patterns.Disposable" />
        </member>
        <member name="M:Zenseless.OpenTK.RenderBuffer.#ctor(OpenTK.Graphics.OpenGL4.RenderbufferStorage,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenTK.RenderBuffer"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Zenseless.OpenTK.RenderBuffer.Handle">
            <summary>
            Returns the OpenGL object handle
            </summary>
        </member>
        <member name="M:Zenseless.OpenTK.RenderBuffer.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            </summary>
        </member>
        <member name="T:Zenseless.OpenTK.Texture">
            <summary>
            Class that encapsulated an OpenGL texture object
            </summary>
        </member>
        <member name="F:Zenseless.OpenTK.Texture.DepthComponent32f">
            <summary>
            Depth component format
            </summary>
        </member>
        <member name="M:Zenseless.OpenTK.Texture.#ctor(System.Int32,System.Int32,OpenTK.Graphics.OpenGL4.SizedInternalFormat,System.Int32,OpenTK.Graphics.OpenGL4.TextureTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:Zenseless.OpenTK.Texture" /> class.
            </summary>
            <param name="width">the width of the texture in texels</param>
            <param name="height">the height of the texture in texels</param>
            <param name="format">the internal format of the texture</param>
            <param name="levels">the number of mip map levels to store in the texture</param>
            <param name="target">The texture target</param>
        </member>
        <member name="P:Zenseless.OpenTK.Texture.Handle">
            <summary>
            Returns the OpenGL object handle
            </summary>
        </member>
        <member name="P:Zenseless.OpenTK.Texture.Width">
            <summary>
            The width of the texture in texels
            </summary>
        </member>
        <member name="P:Zenseless.OpenTK.Texture.Height">
            <summary>
            The height of the texture in texels
            </summary>
        </member>
        <member name="P:Zenseless.OpenTK.Texture.Function">
            <summary>
            Set/get the texture function (wrap mode)
            </summary>
        </member>
        <member name="P:Zenseless.OpenTK.Texture.MinFilter">
            <summary>
            Set/get the minification filter
            </summary>
        </member>
        <member name="P:Zenseless.OpenTK.Texture.MagFilter">
            <summary>
            Set/get the magnification filter
            </summary>
        </member>
        <member name="M:Zenseless.OpenTK.Texture.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            Implementers should dispose all their resources her.
            </summary>
        </member>
        <member name="T:Zenseless.OpenTK.TextureLoader">
            <summary>
            Class for loading textures from images
            </summary>
        </member>
        <member name="M:Zenseless.OpenTK.TextureLoader.Load(System.IO.Stream)">
            <summary>
            Load a texture out of the given stream.
            </summary>
            <param name="stream">A stream containing an image.</param>
            <returns>A Texture.</returns>
        </member>
        <member name="M:Zenseless.OpenTK.TextureLoader.LoadFromResource(System.String)">
            <summary>
            Load a texture out of the given embedded resource.
            </summary>
            <param name="name">The name of the resource that contains an image.</param>
            <returns>A Texture.</returns>
        </member>
        <member name="T:Zenseless.OpenTK.Transformation2d">
            <summary>
            Helper class for calculating transformations.
            </summary>
        </member>
        <member name="M:Zenseless.OpenTK.Transformation2d.Combine(OpenTK.Mathematics.Matrix4,OpenTK.Mathematics.Matrix4)">
            <summary>
            Calculates the combined transformation by first applying the applyToCoordinatesFirst and afterwards the applyToCoordinatesSecond to input points.
            </summary>
            <param name="applyToCoordinatesFirst">A transformation.</param>
            <param name="applyToCoordinatesSecond">A transformation.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenTK.Transformation2d.Combine(OpenTK.Mathematics.Matrix4[])">
            <summary>
            Calculates the combined transformation by applying each transformation to input points.
            </summary>
            <param name="transformations">an array of transformations</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenTK.Transformation2d.Rotation(System.Single)">
            <summary>
            Creates a 2d rotation transformation.
            </summary>
            <param name="angleRadiant">the angle to rotate in radiants</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenTK.Transformation2d.Scale(System.Single,System.Single)">
            <summary>
            Create a 2d scale transformation
            </summary>
            <param name="sx">x-scale factor</param>
            <param name="sy">y-scale factor</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenTK.Transformation2d.Scale(OpenTK.Mathematics.Vector2)">
            <summary>
            Create a 2d scale transformation
            </summary>
            <param name="scale">the scale factors</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenTK.Transformation2d.Scale(System.Single)">
            <summary>
            Create a 2d scale transformation
            </summary>
            <param name="uniformScaleFactor">scale factor for x and y axis</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenTK.Transformation2d.Translate(System.Single,System.Single)">
            <summary>
            Creates a 2d translation transform.
            </summary>
            <param name="tx">the translation factor in x-direction.</param>
            <param name="ty">the translation factor in y-direction.</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenTK.Transformation2d.Translate(OpenTK.Mathematics.Vector2)">
            <summary>
            Creates a 2d translation transform.
            </summary>
            <param name="translation">The translation vector</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenTK.Transformation2d.Transform(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Matrix4)">
            <summary>
            Transform the given input location vector by the given transformation
            </summary>
            <param name="input">input vector to transform</param>
            <param name="transformation">the transformation to apply</param>
            <returns></returns>
        </member>
        <member name="M:Zenseless.OpenTK.Transformation2d.TransformDirection(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Matrix4)">
            <summary>
            Transform the given input direction vector by the given transformation
            </summary>
            <param name="input">input vector to transform</param>
            <param name="transformation">the transformation to apply</param>
            <returns></returns>
        </member>
        <member name="T:Zenseless.OpenTK.VertexArray">
            <summary>
            A vertex array class for interpreting buffer data.
            </summary>
        </member>
        <member name="M:Zenseless.OpenTK.VertexArray.#ctor">
            <summary>
            Create a new vertex array object
            </summary>
        </member>
        <member name="P:Zenseless.OpenTK.VertexArray.Handle">
            <summary>
            Returns the OpenGL object handle
            </summary>
        </member>
        <member name="M:Zenseless.OpenTK.VertexArray.BindIndices(Zenseless.OpenTK.Buffer)">
            <summary>
            Binds the given buffer as an element buffer to the vertex array object
            </summary>
            <param name="buffer">the buffer to bind</param>
        </member>
        <member name="M:Zenseless.OpenTK.VertexArray.Bind">
            <summary>
            Activate the vertex array
            </summary>
        </member>
        <member name="M:Zenseless.OpenTK.VertexArray.BindAttribute(System.Int32,Zenseless.OpenTK.Buffer,System.Int32,System.Int32,OpenTK.Graphics.OpenGL4.VertexAttribType,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Binds a buffer as an attribute.
            </summary>
            <param name="attributeLocation">binding location</param>
            <param name="buffer">the buffer with the attribute data</param>
            <param name="baseTypeCount">Each buffer element consists of a type that is made up of multiple base types like for Vector3 the base type count is 3.</param>
            <param name="elementByteSize">Byte size of one buffer element</param>
            <param name="type">Element base type</param>
            <param name="perInstance">Is this attribute per instance</param>
            <param name="normalized">Should the input data be normalized</param>
            <param name="offset">Offset into the buffer</param>
        </member>
        <member name="M:Zenseless.OpenTK.VertexArray.DisposeResources">
            <summary>
            Will be called from the default Dispose method.
            Implementers should dispose all their resources her.
            </summary>
        </member>
    </members>
</doc>
